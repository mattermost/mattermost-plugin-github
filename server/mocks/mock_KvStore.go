// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-github/server/plugin (interfaces: KvStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pluginapi "github.com/mattermost/mattermost/server/public/pluginapi"
)

// MockKvStore is a mock of KvStore interface.
type MockKvStore struct {
	ctrl     *gomock.Controller
	recorder *MockKvStoreMockRecorder
}

// MockKvStoreMockRecorder is the mock recorder for MockKvStore.
type MockKvStoreMockRecorder struct {
	mock *MockKvStore
}

// NewMockKvStore creates a new mock instance.
func NewMockKvStore(ctrl *gomock.Controller) *MockKvStore {
	mock := &MockKvStore{ctrl: ctrl}
	mock.recorder = &MockKvStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKvStore) EXPECT() *MockKvStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKvStore) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKvStoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKvStore)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockKvStore) Get(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockKvStoreMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKvStore)(nil).Get), arg0, arg1)
}

// ListKeys mocks base method.
func (m *MockKvStore) ListKeys(arg0, arg1 int, arg2 ...pluginapi.ListKeysOption) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeys", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeys indicates an expected call of ListKeys.
func (mr *MockKvStoreMockRecorder) ListKeys(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeys", reflect.TypeOf((*MockKvStore)(nil).ListKeys), varargs...)
}

// Set mocks base method.
func (m *MockKvStore) Set(arg0 string, arg1 interface{}, arg2 ...pluginapi.KVSetOption) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockKvStoreMockRecorder) Set(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockKvStore)(nil).Set), varargs...)
}

// SetAtomicWithRetries mocks base method.
func (m *MockKvStore) SetAtomicWithRetries(key string, valueFunc func(oldValue []byte) (newValue interface{}, err error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAtomicWithRetries", key, valueFunc)
	ret0, _ := ret[0].(error)
	return ret0
}
